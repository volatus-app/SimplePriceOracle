;;
;; Header files for OracleContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_min_slice_int
(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl) inline;

;; __tact_dict_next_slice_int
(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $AddFeeder$_load
(slice, ((slice))) $AddFeeder$_load(slice sc_0) inline;

;; $RemoveFeeder$_load
(slice, ((slice))) $RemoveFeeder$_load(slice sc_0) inline;

;; $FeedPrices$_load
(slice, ((cell))) $FeedPrices$_load(slice sc_0) inline;

;; $PriceData$_store
builder $PriceData$_store(builder build_0, (int, int) v) inline;

;; $PriceData$_store_cell
cell $PriceData$_store_cell((int, int) v) inline;

;; $PriceData$_load
(slice, ((int, int))) $PriceData$_load(slice sc_0) inline;

;; $PriceData$_as_optional
tuple $PriceData$_as_optional((int, int) v) inline;

;; $PriceData$_load_opt
tuple $PriceData$_load_opt(cell cl) inline;

;; $OracleContract$_store
builder $OracleContract$_store(builder build_0, (cell, cell, slice, int) v) inline;

;; $OracleContract$_load
(slice, ((cell, cell, slice, int))) $OracleContract$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $PriceData$_get_price
_ $PriceData$_get_price((int, int) v) inline;

;; $PriceData$_get_lastUpdateTime
_ $PriceData$_get_lastUpdateTime((int, int) v) inline;

;; $PriceData$_not_null
((int, int)) $PriceData$_not_null(tuple v) inline;

;; $OracleContract$_contract_init
(cell, cell, slice, int) $OracleContract$_contract_init() impure inline_ref;

;; $OracleContract$_contract_load
(cell, cell, slice, int) $OracleContract$_contract_load() impure inline_ref;

;; $OracleContract$_contract_store
() $OracleContract$_contract_store((cell, cell, slice, int) v) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $PriceData$_constructor_price_lastUpdateTime
((int, int)) $PriceData$_constructor_price_lastUpdateTime(int $price, int $lastUpdateTime) inline;

;; $OracleContract$_fun_feedPrices
((cell, cell, slice, int), ()) $OracleContract$_fun_feedPrices((cell, cell, slice, int) $self, cell $prices, int $validation) impure inline_ref;

;; $OracleContract$_fun_requireFeeder
((cell, cell, slice, int), ()) $OracleContract$_fun_requireFeeder((cell, cell, slice, int) $self, slice $feeder) impure inline_ref;

;; $OracleContract$_fun_price
((cell, cell, slice, int), int) $OracleContract$_fun_price((cell, cell, slice, int) $self, slice $reserve) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $OracleContract$_fun_forward
((cell, cell, slice, int), ()) $OracleContract$_fun_forward((cell, cell, slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $OracleContract$_fun_notify
((cell, cell, slice, int), ()) $OracleContract$_fun_notify((cell, cell, slice, int) $self, cell $body) impure inline;

;; $OracleContract$_fun_requireOwner
((cell, cell, slice, int), ()) $OracleContract$_fun_requireOwner((cell, cell, slice, int) $self) impure inline_ref;

;; $OracleContract$_fun_owner
((cell, cell, slice, int), slice) $OracleContract$_fun_owner((cell, cell, slice, int) $self) impure inline_ref;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
