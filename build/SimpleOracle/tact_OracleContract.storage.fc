;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: AddFeeder
;; Header: 0xac0abda9
;; TLB: add_feeder#ac0abda9 feeder:address = AddFeeder
;;

(slice, ((slice))) $AddFeeder$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2886385065);
    var v'feeder = sc_0~__tact_load_address();
    return (sc_0, (v'feeder));
}

;;
;; Type: RemoveFeeder
;; Header: 0x4e23d76c
;; TLB: remove_feeder#4e23d76c feeder:address = RemoveFeeder
;;

(slice, ((slice))) $RemoveFeeder$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1310971756);
    var v'feeder = sc_0~__tact_load_address();
    return (sc_0, (v'feeder));
}

;;
;; Type: FeedPrices
;; Header: 0xcb93bbdc
;; TLB: feed_prices#cb93bbdc prices:dict<address, int> = FeedPrices
;;

(slice, ((cell))) $FeedPrices$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3415456732);
    var v'prices = sc_0~load_dict();
    return (sc_0, (v'prices));
}

;;
;; Type: PriceData
;; TLB: _ price:uint32 lastUpdateTime:uint32 = PriceData
;;

builder $PriceData$_store(builder build_0, (int, int) v) inline {
    var (v'price, v'lastUpdateTime) = v;
    build_0 = build_0.store_uint(v'price, 32);
    build_0 = build_0.store_uint(v'lastUpdateTime, 32);
    return build_0;
}

cell $PriceData$_store_cell((int, int) v) inline {
    return $PriceData$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int))) $PriceData$_load(slice sc_0) inline {
    var v'price = sc_0~load_uint(32);
    var v'lastUpdateTime = sc_0~load_uint(32);
    return (sc_0, (v'price, v'lastUpdateTime));
}

tuple $PriceData$_as_optional((int, int) v) inline {
    var (v'price, v'lastUpdateTime) = v;
    return __tact_tuple_create_2(v'price, v'lastUpdateTime);
}

tuple $PriceData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PriceData$_as_optional(sc~$PriceData$_load());
}

_ $PriceData$_get_price((int, int) v) inline {
    var (v'price, v'lastUpdateTime) = v;
    return v'price;
}

_ $PriceData$_get_lastUpdateTime((int, int) v) inline {
    var (v'price, v'lastUpdateTime) = v;
    return v'lastUpdateTime;
}

((int, int)) $PriceData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'price, int vvv'lastUpdateTime) = __tact_tuple_destroy_2(v);
    return (vvv'price, vvv'lastUpdateTime);
}

((int, int)) $PriceData$_constructor_price_lastUpdateTime(int $price, int $lastUpdateTime) inline {
    return ($price, $lastUpdateTime);
}

;;
;; Type: OracleContract
;;

builder $OracleContract$_store(builder build_0, (cell, cell, slice, int) v) inline {
    var (v'prices, v'feeders, v'owner, v'expirationPeriod) = v;
    build_0 = build_0.store_dict(v'prices);
    build_0 = build_0.store_dict(v'feeders);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'expirationPeriod, 257);
    return build_0;
}

(slice, ((cell, cell, slice, int))) $OracleContract$_load(slice sc_0) inline {
    var v'prices = sc_0~load_dict();
    var v'feeders = sc_0~load_dict();
    var v'owner = sc_0~__tact_load_address();
    var v'expirationPeriod = sc_0~load_int(257);
    return (sc_0, (v'prices, v'feeders, v'owner, v'expirationPeriod));
}

(cell, cell, slice, int) $OracleContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$OracleContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $OracleContract$_contract_init();
    }
}

() $OracleContract$_contract_store((cell, cell, slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $OracleContract$_store(b, v);
    set_data(b.end_cell());
}